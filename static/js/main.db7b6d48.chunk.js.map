{"version":3,"sources":["components/Header.jsx","components/SortingAlgoVisualizer.jsx","App.jsx","index.js"],"names":["Header","_ref","handleArrSizeChange","handleViewSpeedChange","arrSize","setArrSize","useState","viewSpeed","setViewSpeed","React","createElement","Fragment","className","type","min","max","step","value","id","onChange","e","parseInt","target","SortingAlgoVisualizer","bars","setBars","sortingInProgress","setSortingInProgress","selectedBarIndex","setSelectedBarIndex","reverseSpeed","randomIntFromInterval","Math","floor","random","generateArray","useCallback","i","push","useEffect","map","index","key","concat","includes","style","height","onClick","LuRefreshCcw","marginLeft","disabled","async","arrForBubbleSort","length","j","Promise","resolve","setTimeout","min_idx","App","ReactDOM","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.db7b6d48.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nfunction Header({ handleArrSizeChange, handleViewSpeedChange }) {\r\n  const [arrSize, setArrSize] = useState(100);\r\n  const [viewSpeed, setViewSpeed] = useState(25);\r\n\r\n  const handleArrSizeRangeChange = (e) => {\r\n    const value = parseInt(e.target.value);\r\n    setArrSize(value);\r\n    handleArrSizeChange(value);\r\n  };\r\n\r\n  const handleViewSpeedRangeChange = (e) => {\r\n    const value = parseInt(e.target.value);\r\n    setViewSpeed(value);\r\n    handleViewSpeedChange(value);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"header\">\r\n        <h1>Sorting Algorithm Visualizer</h1>\r\n        <div className=\"slidecontainer\">\r\n          <label>Array Size:</label>\r\n          <input\r\n            type=\"range\"\r\n            min=\"50\"\r\n            max=\"150\"\r\n            className=\"slider\"\r\n            step=\"50\"\r\n            value={arrSize}\r\n            id=\"arrSizeRange\"\r\n            onChange={handleArrSizeRangeChange}\r\n          />\r\n        </div>\r\n        <div className=\"slidecontainer\">\r\n          <label>View Speed:</label>\r\n          <input\r\n            type=\"range\"\r\n            min=\"25\"\r\n            max=\"100\"\r\n            className=\"slider\"\r\n            step=\"25\"\r\n            value={viewSpeed}\r\n            onChange={handleViewSpeedRangeChange}\r\n            id=\"viewSpeedRange\"\r\n          />\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React, { useCallback, useEffect, useState } from \"react\";\r\nimport { LuRefreshCcw } from \"react-icons/lu\";\r\n\r\nfunction SortingAlgoVisualizer({ arrSize, viewSpeed }) {\r\n  const [bars, setBars] = useState([]);\r\n  const [sortingInProgress, setSortingInProgress] = useState(false);\r\n  const [selectedBarIndex, setSelectedBarIndex] = useState([null, null]);\r\n\r\n  const reverseSpeed = 100 - viewSpeed + 25;\r\n\r\n  function randomIntFromInterval(min, max) {\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n  }\r\n\r\n  const generateArray = useCallback(() => {\r\n    const bars = [];\r\n    for (let i = 0; i < arrSize; i++) {\r\n      bars.push(randomIntFromInterval(5, 400));\r\n    }\r\n    setBars(bars);\r\n  }, [arrSize]);\r\n\r\n  useEffect(() => {\r\n    generateArray();\r\n  }, [generateArray]);\r\n\r\n  const bubbleSort = async () => {\r\n    setSortingInProgress(true);\r\n    const arrForBubbleSort = [...bars];\r\n    //let isSwapped = false;\r\n\r\n    for (let i = 0; i < arrForBubbleSort.length - 1; i++) {\r\n      for (let j = 0; j < arrForBubbleSort.length - i - 1; j++) {\r\n        if (arrForBubbleSort[j] > arrForBubbleSort[j + 1]) {\r\n          [arrForBubbleSort[j], arrForBubbleSort[j + 1]] = [\r\n            arrForBubbleSort[j + 1],\r\n            arrForBubbleSort[j],\r\n          ];\r\n\r\n          setSelectedBarIndex([j, j + 1]);\r\n\r\n          await new Promise((resolve) => {\r\n            setTimeout(() => {\r\n              setBars([...arrForBubbleSort]);\r\n              resolve();\r\n            }, reverseSpeed); // Adjust the delay time as needed\r\n          });\r\n          //isSwapped = true;\r\n        }\r\n      }\r\n\r\n      //if (isSwapped === false) break;\r\n    }\r\n\r\n    setSelectedBarIndex([null, null]);\r\n    setSortingInProgress(false);\r\n  };\r\n\r\n  const selectionSort = async () => {\r\n    setSortingInProgress(true);\r\n    const arrForBubbleSort = [...bars];\r\n\r\n    for (let i = 0; i < arrSize - 1; i++) {\r\n      let min_idx = i;\r\n      for (let j = i + 1; j < arrSize; j++) {\r\n        if (arrForBubbleSort[j] < arrForBubbleSort[min_idx]) {\r\n          min_idx = j;\r\n        }\r\n      }\r\n\r\n      [arrForBubbleSort[i], arrForBubbleSort[min_idx]] = [\r\n        arrForBubbleSort[min_idx],\r\n        arrForBubbleSort[i],\r\n      ];\r\n\r\n      setSelectedBarIndex([i, min_idx]);\r\n\r\n      await new Promise((resolve) => {\r\n        setTimeout(() => {\r\n          setBars([...arrForBubbleSort]);\r\n          resolve();\r\n        }, reverseSpeed);\r\n      });\r\n    }\r\n    setSelectedBarIndex([null, null]);\r\n    setSortingInProgress(false);\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"bar-chart\">\r\n        {bars.map((value, index) => (\r\n          <div\r\n            key={index}\r\n            className={`bar ${\r\n              selectedBarIndex.includes(index) ? \"selected\" : \"\"\r\n            }`}\r\n            style={{ height: `${value}px` }}\r\n          />\r\n        ))}\r\n        <button\r\n            onClick={generateArray}\r\n            className=\"btn-gen\"\r\n          >\r\n            <LuRefreshCcw />\r\n            {/* Assuming LuRefreshCcw is your icon component */}\r\n            <span style={{ marginLeft: \"0.5rem\" }}>Generate Array</span>\r\n          </button>\r\n        <div className=\"buttons\" >\r\n          \r\n          <button\r\n            disabled={sortingInProgress}\r\n            onClick={bubbleSort}\r\n            className=\"btn\"\r\n          >\r\n            Bubble Sort\r\n          </button>\r\n          <button\r\n            disabled={sortingInProgress}\r\n            onClick={selectionSort}\r\n            className=\"btn\"\r\n          >\r\n            Selection Sort\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SortingAlgoVisualizer;\r\n","import React, { useState } from 'react';\nimport './App.css';\nimport Header from './components/Header';\nimport SortingAlgoVisualizer from './components/SortingAlgoVisualizer';\n\nfunction App() {\n  const [arrSize, setArrSize] = useState(100);\n  const [viewSpeed, setViewSpeed] = useState(25);\n\n  const handleArrSizeChange = (value) => {\n    setArrSize(value);\n  };\n\n  const handleViewSpeedChange = (value) => {\n    setViewSpeed(value);\n  };\n  return (\n    <div className=\"App\">\n      <Header handleArrSizeChange={handleArrSizeChange} handleViewSpeedChange={handleViewSpeedChange}/>\n      <SortingAlgoVisualizer arrSize={arrSize} viewSpeed={viewSpeed}/>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport App from './App';\nimport './index.css';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n    <App />\n);\n"],"sourceRoot":""}